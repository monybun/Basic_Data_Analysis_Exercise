import math
import collections

import numpy as np
import pandas as pd
import matplotlib.pyplot as pp

# multiply 100 to be able to use range();
# loop over all possible counts for each coin (summing up to <= £100);
# when the result of sum is exactly £1 
combinations = []

for count_100 in range(1+1):
    for count_50 in range(2+1):
        for count_25 in range(4+1):
            for count_10 in range(10+1):
                for count_5 in range(20+1):
                    for count_1 in range(100+1):
                        if 100*count_100 + 50*count_50 + 25*count_25 + 10*count_10 + 5*count_5 + count_1 == 100:
                        # put any combination add up to 100 in the list of list
                            combinations.append([count_100, count_50, count_25, count_10, count_5, count_1])

combinations
# Count all the possibilities
len(combinations)

#################################################################################
# Alternatively:
combinations_amounts = []

for amount_100 in range(0, 100+1, 100):
    for amount_50 in range(0, 100+1, 50):
        for amount_25 in range(0, 100+1, 25):
            for amount_10 in range(0, 100+1, 10):
                for amount_5 in range(0, 100+1, 5):
                    total_so_far = amount_100 + amount_50 + amount_25 + amount_10 + amount_5
                    
                    if total_so_far <= 100:
                        combinations_amounts.append([amount_100, amount_50, amount_25, amount_10, amount_5,
                                                     100 - total_so_far])
                                                     
combinations_amounts
len(combinations_amounts)

###############--------------------------------------------######################
# Turn it into a defined function:

def combinations(sum_total):
    combinations_solution = []
    
    for amount_100 in range(0, 100+1, 100):
        for amount_50 in range(0, 100+1, 50):
            for amount_25 in range(0, 100+1, 25):
                for amount_10 in range(0, 100+1, 10):
                    for amount_5 in range(0, 100+1, 5):
                        total_so_far = amount_100 + amount_50 + amount_25 + amount_10 + amount_5
                        
                        if total_so_far <= sum_total:
                          combinations_solution.append([amount_100, amount_50, amount_25, amount_10, amount_5, sum_total - total_so_far])
              
   return combinations_solution

len(combinations_solution(100))

len(combinations_solution(200))

len(combinations_solution(300))

###############--------------------------------------------######################
# See how fast can these solutions grow when sum_total increases
# Visialising:

sum_totals = range(100, 800, 100)
no_of_solutions = [len(combinations_solution(sum_total) for sum_total in sum_totals)]

pp.plot(sum_totals, no_of_solutions)
